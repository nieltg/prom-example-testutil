// Code generated by MockGen. DO NOT EDIT.
// Source: ../../pkg/testutil/filter.go

// Package mock_testutil is a generated GoMock package.
package mock_testutil

import (
	gomock "github.com/golang/mock/gomock"
	go0 "github.com/prometheus/client_model/go"
	reflect "reflect"
)

// Mockfilterer is a mock of filterer interface
type Mockfilterer struct {
	ctrl     *gomock.Controller
	recorder *MockfiltererMockRecorder
}

// MockfiltererMockRecorder is the mock recorder for Mockfilterer
type MockfiltererMockRecorder struct {
	mock *Mockfilterer
}

// NewMockfilterer creates a new mock instance
func NewMockfilterer(ctrl *gomock.Controller) *Mockfilterer {
	mock := &Mockfilterer{ctrl: ctrl}
	mock.recorder = &MockfiltererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockfilterer) EXPECT() *MockfiltererMockRecorder {
	return m.recorder
}

// FilterMetricsByName mocks base method
func (m *Mockfilterer) FilterMetricsByName(metrics []*go0.MetricFamily, names ...string) []*go0.MetricFamily {
	m.ctrl.T.Helper()
	varargs := []interface{}{metrics}
	for _, a := range names {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FilterMetricsByName", varargs...)
	ret0, _ := ret[0].([]*go0.MetricFamily)
	return ret0
}

// FilterMetricsByName indicates an expected call of FilterMetricsByName
func (mr *MockfiltererMockRecorder) FilterMetricsByName(metrics interface{}, names ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{metrics}, names...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterMetricsByName", reflect.TypeOf((*Mockfilterer)(nil).FilterMetricsByName), varargs...)
}
