// Code generated by MockGen. DO NOT EDIT.
// Source: ../../pkg/testutil/collect.go

// Package mock_testutil is a generated GoMock package.
package mock_testutil

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	prometheus "github.com/prometheus/client_golang/prometheus"
	go0 "github.com/prometheus/client_model/go"
)

// MockregistererGatherer is a mock of registererGatherer interface
type MockregistererGatherer struct {
	ctrl     *gomock.Controller
	recorder *MockregistererGathererMockRecorder
}

// MockregistererGathererMockRecorder is the mock recorder for MockregistererGatherer
type MockregistererGathererMockRecorder struct {
	mock *MockregistererGatherer
}

// NewMockregistererGatherer creates a new mock instance
func NewMockregistererGatherer(ctrl *gomock.Controller) *MockregistererGatherer {
	mock := &MockregistererGatherer{ctrl: ctrl}
	mock.recorder = &MockregistererGathererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockregistererGatherer) EXPECT() *MockregistererGathererMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockregistererGatherer) Register(arg0 prometheus.Collector) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockregistererGathererMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockregistererGatherer)(nil).Register), arg0)
}

// MustRegister mocks base method
func (m *MockregistererGatherer) MustRegister(arg0 ...prometheus.Collector) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "MustRegister", varargs...)
}

// MustRegister indicates an expected call of MustRegister
func (mr *MockregistererGathererMockRecorder) MustRegister(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustRegister", reflect.TypeOf((*MockregistererGatherer)(nil).MustRegister), arg0...)
}

// Unregister mocks base method
func (m *MockregistererGatherer) Unregister(arg0 prometheus.Collector) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unregister", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Unregister indicates an expected call of Unregister
func (mr *MockregistererGathererMockRecorder) Unregister(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockregistererGatherer)(nil).Unregister), arg0)
}

// Gather mocks base method
func (m *MockregistererGatherer) Gather() ([]*go0.MetricFamily, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gather")
	ret0, _ := ret[0].([]*go0.MetricFamily)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gather indicates an expected call of Gather
func (mr *MockregistererGathererMockRecorder) Gather() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gather", reflect.TypeOf((*MockregistererGatherer)(nil).Gather))
}

// Mockcollector is a mock of collector interface
type Mockcollector struct {
	ctrl     *gomock.Controller
	recorder *MockcollectorMockRecorder
}

// MockcollectorMockRecorder is the mock recorder for Mockcollector
type MockcollectorMockRecorder struct {
	mock *Mockcollector
}

// NewMockcollector creates a new mock instance
func NewMockcollector(ctrl *gomock.Controller) *Mockcollector {
	mock := &Mockcollector{ctrl: ctrl}
	mock.recorder = &MockcollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockcollector) EXPECT() *MockcollectorMockRecorder {
	return m.recorder
}

// MustCollect mocks base method
func (m *Mockcollector) MustCollect(arg0 ...prometheus.Collector) prometheus.Gatherer {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MustCollect", varargs...)
	ret0, _ := ret[0].(prometheus.Gatherer)
	return ret0
}

// MustCollect indicates an expected call of MustCollect
func (mr *MockcollectorMockRecorder) MustCollect(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustCollect", reflect.TypeOf((*Mockcollector)(nil).MustCollect), arg0...)
}
