// Code generated by MockGen. DO NOT EDIT.
// Source: ../../pkg/testutil/print.go

// Package mock_testutil is a generated GoMock package.
package mock_testutil

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	go0 "github.com/prometheus/client_model/go"
)

// Mockprinter is a mock of printer interface
type Mockprinter struct {
	ctrl     *gomock.Controller
	recorder *MockprinterMockRecorder
}

// MockprinterMockRecorder is the mock recorder for Mockprinter
type MockprinterMockRecorder struct {
	mock *Mockprinter
}

// NewMockprinter creates a new mock instance
func NewMockprinter(ctrl *gomock.Controller) *Mockprinter {
	mock := &Mockprinter{ctrl: ctrl}
	mock.recorder = &MockprinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockprinter) EXPECT() *MockprinterMockRecorder {
	return m.recorder
}

// PrintMetrics mocks base method
func (m *Mockprinter) PrintMetrics(metrics []*go0.MetricFamily) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintMetrics", metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrintMetrics indicates an expected call of PrintMetrics
func (mr *MockprinterMockRecorder) PrintMetrics(metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintMetrics", reflect.TypeOf((*Mockprinter)(nil).PrintMetrics), metrics)
}
